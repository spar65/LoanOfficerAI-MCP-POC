---
description: Use when implementing UI components to ensure they meet accessibility standards and provide an inclusive experience for all users
globs: "**/components/**/*.{tsx,jsx,ts,js}, **/pages/**/*.{tsx,jsx}, **/app/**/*.{tsx,jsx}"
alwaysApply: false
---

___
description: IMPLEMENT accessible interfaces when DEVELOPING UI components to ENSURE usability for all users, including those with disabilities
globs: "**/*.{tsx,jsx,ts,js,css,html}"
___

# Accessibility Requirements

## Context
- Our platform must be usable by people with diverse abilities and disabilities
- Accessibility is both a legal requirement and core value of the platform
- Users rely on assistive technologies like screen readers, keyboard navigation, and zoom
- Components must follow WCAG 2.1 AA standards at minimum
- Accessibility features benefit all users, not just those with disabilities
- Testing with actual assistive technologies is essential

## Requirements

### Semantic HTML

- **REQUIRED**: Use the most appropriate HTML elements for their semantic purpose
- Structure content using proper heading hierarchy (h1-h6)
- Use native HTML elements before ARIA when possible
- Preserve semantic structure when styling elements
- Implement proper landmark regions (header, main, nav, footer)

```tsx
// GOOD: Using semantic HTML
function GoodSemanticStructure() {
  return (
    <>
      <header>
        <h1>Dashboard</h1>
        <nav>
          <ul>
            <li><a href="/overview">Overview</a></li>
            <li><a href="/agents">Agents</a></li>
          </ul>
        </nav>
      </header>
      <main>
        <section aria-labelledby="overview-heading">
          <h2 id="overview-heading">Overview</h2>
          <p>Your workspace summary and key metrics.</p>
        </section>
      </main>
      <footer>
        <p>&copy; 2023 AgentMinder</p>
      </footer>
    </>
  );
}

// BAD: Using divs for everything
function BadSemanticStructure() {
  return (
    <div className="page">
      <div className="top">
        <div className="title">Dashboard</div>
        <div className="menu">
          <div onClick={() => navigate('/overview')}>Overview</div>
          <div onClick={() => navigate('/agents')}>Agents</div>
        </div>
      </div>
      <div className="content">
        <div className="section">
          <div className="heading">Overview</div>
          <div>Your workspace summary and key metrics.</div>
        </div>
      </div>
      <div className="bottom">
        <div>&copy; 2023 AgentMinder</div>
      </div>
    </div>
  );
}
```

### Keyboard Navigation

- **REQUIRED**: All interactive elements must be keyboard accessible
- **REQUIRED**: Maintain logical tab order based on visual layout
- Implement custom keyboard shortcuts consistently
- Provide visible focus indicators for all interactive elements
- Ensure modals and dropdowns trap focus appropriately
- Test all flows using only keyboard navigation

```tsx
// GOOD: Accessible button with keyboard support
function AccessibleButton({ onClick, children }) {
  return (
    <button
      onClick={onClick}
      className="px-4 py-2 bg-blue-500 text-white rounded focus:ring-2 focus:ring-blue-600 focus:ring-offset-2 focus:outline-none"
    >
      {children}
    </button>
  );
}

// BAD: Div used as button with no keyboard support
function InaccessibleButton({ onClick, children }) {
  return (
    <div
      onClick={onClick}
      className="px-4 py-2 bg-blue-500 text-white rounded cursor-pointer"
    >
      {children}
    </div>
  );
}
```

### Screen Reader Support

- **REQUIRED**: Provide appropriate alt text for images
- **REQUIRED**: Use aria-label, aria-labelledby, and aria-describedby appropriately
- Implement aria-live regions for dynamic content
- Set appropriate ARIA roles when overriding default semantics
- Hide decorative elements from screen readers
- Test with actual screen readers (NVDA, VoiceOver)

```tsx
// GOOD: Image with appropriate alt text
<img 
  src="/images/analytics-chart.png" 
  alt="Analytics showing 27% increase in agent usage over the last month" 
/>

// GOOD: Decorative image hidden from screen readers
<img 
  src="/images/decorative-pattern.svg" 
  alt="" 
  role="presentation" 
/>

// GOOD: Using aria-live for notifications
function Notification({ message, isVisible }) {
  return (
    <div 
      aria-live="polite" 
      className={`notification ${isVisible ? 'visible' : 'hidden'}`}
    >
      {message}
    </div>
  );
}

// BAD: Missing alt text
<img src="/images/analytics-chart.png" />

// BAD: Unhelpful alt text
<img src="/images/analytics-chart.png" alt="Chart" />

// BAD: Using aria incorrectly
<div role="button" className="button">Submit</div> // missing tabIndex, keyboard handlers
```

### Color and Contrast

- **REQUIRED**: Maintain minimum contrast ratios (4.5:1 for normal text, 3:1 for large text)
- **REQUIRED**: Don't rely on color alone to convey information
- Use both color and additional indicators (icons, patterns, text)
- Support high contrast mode
- Test color schemes with color blindness simulators
- Provide sufficient contrast between foreground and background

```tsx
// GOOD: Using color + icon for status
function StatusIndicator({ status }) {
  const statusConfig = {
    success: { color: 'bg-green-500', icon: <CheckIcon />, label: 'Success' },
    warning: { color: 'bg-yellow-500', icon: <AlertIcon />, label: 'Warning' },
    error: { color: 'bg-red-500', icon: <ErrorIcon />, label: 'Error' },
  };
  
  const { color, icon, label } = statusConfig[status];
  
  return (
    <div className={`flex items-center px-2 py-1 rounded ${color}`}>
      <span className="mr-1">{icon}</span>
      <span>{label}</span>
    </div>
  );
}

// BAD: Using only color for status
function BadStatusIndicator({ status }) {
  const statusColor = {
    success: 'bg-green-500',
    warning: 'bg-yellow-500',
    error: 'bg-red-500',
  };
  
  return (
    <div className={`w-4 h-4 rounded-full ${statusColor[status]}`} />
  );
}
```

### Forms and Inputs

- **REQUIRED**: Label all form controls properly with associated labels
- **REQUIRED**: Provide clear error messages for form validation
- Group related form elements with fieldset and legend
- Use placeholder text as supplementary information, not as a label replacement
- Implement descriptive error messages that suggest corrections
- Ensure inputs have sufficient size for touch targets

```tsx
// GOOD: Properly labeled form field with error state
function FormField({ id, label, type = 'text', error, ...props }) {
  return (
    <div className="mb-4">
      <label 
        htmlFor={id}
        className="block text-sm font-medium mb-1"
      >
        {label}
      </label>
      <input
        id={id}
        type={type}
        aria-invalid={!!error}
        aria-describedby={error ? `${id}-error` : undefined}
        className={`w-full px-3 py-2 border rounded ${
          error ? 'border-red-500' : 'border-gray-300'
        }`}
        {...props}
      />
      {error && (
        <p 
          id={`${id}-error`} 
          className="mt-1 text-sm text-red-600"
        >
          {error}
        </p>
      )}
    </div>
  );
}

// BAD: Input without label
function BadFormField({ placeholder, ...props }) {
  return (
    <div className="mb-4">
      <input
        placeholder={placeholder}
        className="w-full px-3 py-2 border rounded border-gray-300"
        {...props}
      />
    </div>
  );
}
```

### Responsive Design

- **REQUIRED**: Support zoom up to 200% without loss of content or functionality
- Ensure touch targets are at least 44x44 pixels
- Test with various screen sizes and zoom levels
- Support both portrait and landscape orientations
- Implement responsive designs that adapt to different screen sizes
- Allow content reflow rather than requiring horizontal scrolling

```tsx
// GOOD: Responsive design with appropriate size targets
function ResponsiveComponent() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {items.map(item => (
        <button
          key={item.id}
          className="p-4 min-h-[44px] min-w-[44px] bg-white rounded shadow"
        >
          {item.name}
        </button>
      ))}
    </div>
  );
}
```

## Dependencies
- Related rules: [departments/product/030-visual-style-consolidated.mdc](mdc:departments/product/030-visual-style-consolidated.mdc)
- Required packages: @radix-ui/react-* (for accessible components)
- External standards: WCAG 2.1 AA, ADA compliance requirements

## Testing Guidelines
- Use automated tools like axe, Lighthouse, and WAVE for initial testing
- Manually test with keyboard navigation for all interactive elements
- Test with screen readers: NVDA (Windows), VoiceOver (Mac/iOS), TalkBack (Android)
- Verify color contrast with tools like Contrast Checker
- Test at various zoom levels (up to 200%)
- Validate all form interactions with keyboard only

## Implementation Checklist

- [ ] Semantic HTML: Use proper semantic elements and heading hierarchy
- [ ] Keyboard Access: Ensure all interactive elements are keyboard accessible
- [ ] Screen Reader: Test with actual screen readers and implement proper ARIA attributes
- [ ] Color & Contrast: Verify sufficient contrast ratios and don't rely on color alone
- [ ] Forms: Implement properly labeled form controls with clear error states
- [ ] Focus Management: Ensure visible focus indicators and logical tab order
- [ ] Responsive: Test at different zoom levels and screen sizes
- [ ] ARIA: Use ARIA attributes correctly when native HTML isn't sufficient

## Related Rules
- [departments/product/030-visual-style-consolidated.mdc](mdc:departments/product/030-visual-style-consolidated.mdc) - Visual design system
- [departments/product/050-css-architecture.mdc](mdc:departments/product/050-css-architecture.mdc) - CSS architecture
- [technologies/frameworks/042-ui-component-architecture.mdc](mdc:technologies/frameworks/042-ui-component-architecture.mdc) - UI component structure

## Reference Implementations

For detailed implementation examples, refer to our documentation examples:

- [AccessibilityImplementationGuide.md](mdc:examples/accessibility/AccessibilityImplementationGuide.md) - Comprehensive guide to implementing accessibility features

**Important Note**: These reference implementations are provided as documentation examples only and are not meant to be imported or used directly in your codebase. They demonstrate the patterns and practices that should be followed when implementing accessibility features.

## Full Documentation Access

To access the complete documentation including all examples, please refer to the original enterprise-cursor-rules repository. The examples directory in the repository contains detailed implementation guides that are referenced above.

The flat structure of the Cursor rules deployment may not include these examples directly, but they remain available in the source repository. 