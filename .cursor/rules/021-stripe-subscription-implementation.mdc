---
description: 
globs: 
alwaysApply: false
---
___
description: IMPLEMENT secure Stripe integration patterns when ADDING payment processing or subscription features to ENSURE compliance, security, and reliability
globs: "**/{stripe,payment,subscription,checkout}*.{ts,tsx,js,jsx}"
___

# Stripe Integration Standards

## Context
- Stripe is a primary payment processor for subscription services
- This rule builds upon the general payment security standards in [020-payment-security.mdc](mdc:departments/engineering/security/020-payment-security.mdc)
- Payment processing requires special security and compliance considerations
- Webhook handlers must be robust and handle all subscription lifecycle events
- Client and server implementations have different security requirements

## Requirements

### API Keys and Environment Variables
- **REQUIRED**: Store Stripe secret keys in environment variables only (never in code)
- **REQUIRED**: Use `STRIPE_SECRET_KEY` for server-side operations
- **REQUIRED**: Use `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY` for client-side operations
- **REQUIRED**: Configure different API keys for development, testing, and production
- Implement environment variable validation on application startup

```typescript
// Good: Server-side environment validation
const stripeSecretKey = process.env.STRIPE_SECRET_KEY;
if (!stripeSecretKey) {
  throw new Error('STRIPE_SECRET_KEY is not set');
}
const stripe = new Stripe(stripeSecretKey, { apiVersion: '2024-04-10' as any });

// Good: Client-side publishable key usage
const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;
if (!publishableKey) {
  console.error('Stripe publishable key is missing');
}
```

### Webhook Implementation
- **REQUIRED**: Disable body parsing in API routes for webhooks
- **REQUIRED**: Verify webhook signatures with `STRIPE_WEBHOOK_SECRET`
- **REQUIRED**: Return 200 status for processed webhooks (even with errors)
- **REQUIRED**: Handle all subscription lifecycle events:
  - `checkout.session.completed`
  - `customer.subscription.created`
  - `customer.subscription.updated`
  - `customer.subscription.deleted`
  - `invoice.payment_succeeded`
  - `invoice.payment_failed`
  - `payment_intent.succeeded`
  - `payment_intent.payment_failed`
- Log webhook events with appropriate detail for debugging
- Implement idempotency in webhook handlers to prevent duplicate processing

```typescript
// Good: Webhook configuration and signature verification
export const config = {
  api: {
    bodyParser: false,
  },
};

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method === 'POST') {
    const buf = await buffer(req);
    const sig = req.headers['stripe-signature'];

    if (!sig) {
      console.error('Webhook Error: Missing stripe-signature header');
      return res.status(400).send('Webhook Error: Missing signature');
    }

    let event: Stripe.Event;

    try {
      event = stripe.webhooks.constructEvent(buf.toString(), sig, webhookSecret);
      // Process the event...
    } catch (err: any) {
      console.error(`Webhook signature verification failed: ${err.message}`);
      return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    // Always return 200 to acknowledge receipt
    return res.status(200).json({ received: true });
  }
};
```

### Subscription Management
- **REQUIRED**: Use Stripe Checkout for initial subscription creation
- **REQUIRED**: Use Customer Portal for subscription management
- **REQUIRED**: Store subscription metadata including plan details
- **REQUIRED**: Implement proper error handling for payment failures
- **REQUIRED**: Track subscription status changes in your database
- Use webhooks as the source of truth for subscription status
- Implement subscription lifecycle hooks (created, updated, cancelled)

```typescript
// Good: Checkout session creation with metadata
const session = await stripe.checkout.sessions.create({
  payment_method_types: ['card'],
  mode: 'subscription',
  line_items: [
    {
      price: priceId,
      quantity: 1,
    },
  ],
  success_url: `${req.headers.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
  cancel_url: `${req.headers.origin}/subscribe`,
  metadata: {
    planId: planId,
  },
});
```

### JWT Implementation
- **REQUIRED**: Generate JWTs upon successful subscription creation
- **REQUIRED**: Include only necessary entitlement data in tokens:
  - User ID
  - Subscription ID (optional)
  - Feature list
  - Expiration time (1 hour recommended)
- **REQUIRED**: Verify JWT signatures when checking feature access
- Implement token refresh mechanisms to maintain user sessions
- Never store sensitive payment information in tokens

```typescript
// Good: JWT generation with subscription entitlements
import jwt from 'jsonwebtoken';

async function generateSubscriptionToken(userId, subscriptionId, features) {
  // Get the JWT secret from environment variable
  const secret = process.env.JWT_SECRET;
  if (!secret) {
    throw new Error('JWT_SECRET is not set');
  }
  
  // Create token with minimal required data
  const token = jwt.sign(
    {
      sub: userId,
      sid: subscriptionId,
      features: features,
    },
    secret,
    { expiresIn: '1h' } // Short expiry to limit exposure
  );
  
  return token;
}

// Good: JWT verification for feature access
async function verifyFeatureAccess(token, requestedFeature) {
  try {
    const secret = process.env.JWT_SECRET;
    const decoded = jwt.verify(token, secret);
    
    // Check if feature is in the entitlements
    return decoded.features.includes(requestedFeature);
  } catch (error) {
    // Token invalid or expired
    return false;
  }
}
```

### Feature Gating
- **REQUIRED**: Check feature entitlements before enabling premium features
- **REQUIRED**: Support multiple subscription tiers with different feature sets
- **REQUIRED**: Implement graceful degradation for users without access
- Show clear upgrade paths when users attempt to access gated features
- Create reusable components to handle feature access checks
- Cache feature access results appropriately to minimize API calls

```typescript
// Good: Feature-gated component
function FeatureGate({ feature, fallback, children }) {
  const [hasAccess, setHasAccess] = useState(false);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    async function checkAccess() {
      setLoading(true);
      try {
        const response = await fetch('/api/check-feature', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ feature }),
        });
        
        if (!response.ok) throw new Error('Failed to check feature access');
        
        const data = await response.json();
        setHasAccess(data.hasAccess);
      } catch (error) {
        console.error('Error checking feature access:', error);
        setHasAccess(false); // Fail closed on error
      } finally {
        setLoading(false);
      }
    }
    
    checkAccess();
  }, [feature]);
  
  if (loading) return <div className="loading">Loading...</div>;
  if (!hasAccess) return fallback || <UpgradePrompt feature={feature} />;
  
  return <>{children}</>;
}
```

### Error Handling and Logging
- **REQUIRED**: Implement comprehensive error handling for Stripe API calls
- **REQUIRED**: Log webhook processing errors but still return 200 status
- **REQUIRED**: Forward clear error messages to users for payment failures
- **REQUIRED**: Handle network interruptions and retries gracefully
- Monitor and alert on repeated payment failures or webhook errors
- Log subscription lifecycle events for auditing purposes

```typescript
// Good: Error handling in API routes
try {
  // Stripe API call...
} catch (error: any) {
  console.error('Stripe API error:', error);
  
  // Classify errors
  if (error.type === 'StripeCardError') {
    return res.status(400).json({ error: error.message });
  } else if (error.type === 'StripeInvalidRequestError') {
    return res.status(400).json({ error: 'Invalid parameters in Stripe request' });
  } else {
    // For server errors, don't expose internal details
    console.error('Unexpected Stripe error:', error);
    return res.status(500).json({ error: 'An unexpected error occurred' });
  }
}
```

### Testing
- **REQUIRED**: Use test mode keys for all non-production environments
- **REQUIRED**: Use the webhook test page for validating webhook handlers
- **REQUIRED**: Test all subscription lifecycle events before deployment
- **REQUIRED**: Implement test utilities for mocking Stripe responses
- Create test fixtures for common Stripe objects (customers, subscriptions)
- Set up end-to-end tests for the payment flow

```typescript
// Good: Using test helpers for webhook testing
import { createTestEvent, sendTestEvent } from '../utils/StripeIntegration';

test('webhook should process subscription created event', async () => {
  const { event } = createTestEvent('customer.subscription.created', {
    planId: 'basic'
  });
  
  const result = await sendTestEvent('customer.subscription.created', 
    { planId: 'basic' },
    { endpoint: '/api/webhooks/stripe' }
  );
  
  expect(result.status).toBe(200);
});
```

### Security
- **REQUIRED**: Never log full card details or sensitive information
- **REQUIRED**: Use HTTPS for all Stripe-related API calls
- **REQUIRED**: Implement proper access controls for subscription-gated features
- **REQUIRED**: Validate all inputs before passing to Stripe API
- Rate limit sensitive operations to prevent abuse
- Implement fraud detection mechanisms for high-risk operations

```typescript
// Good: Input validation before Stripe API calls
if (!priceId) {
  return res.status(400).json({ error: `Invalid planId: ${planId}` });
}

// Good: Redacting sensitive information in logs
console.log(`Processing subscription for customer: ${customerId.substring(0, 6)}...`);
```

## Examples

<example>
// Good: Implementing comprehensive webhook handler
import { buffer } from 'micro';
import Stripe from 'stripe';
import { prisma } from '@/lib/prisma';

// Configure API route
export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).end();
  }

  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
    apiVersion: '2023-10-16',
  });
  
  const signature = req.headers['stripe-signature'];
  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
  
  if (!signature || !webhookSecret) {
    return res.status(400).json({ error: 'Missing signature or webhook secret' });
  }
  
  try {
    const buf = await buffer(req);
    const event = stripe.webhooks.constructEvent(
      buf.toString(),
      signature,
      webhookSecret
    );
    
    // Check for duplicate events (idempotency)
    const existingEvent = await prisma.stripeEvent.findUnique({
      where: { id: event.id },
    });
    
    if (existingEvent) {
      return res.status(200).json({ message: 'Event already processed' });
    }
    
    // Process based on event type
    switch (event.type) {
      case 'checkout.session.completed':
        await handleCheckoutSession(event.data.object);
        break;
      case 'customer.subscription.created':
      case 'customer.subscription.updated':
        await handleSubscriptionChange(event.data.object);
        break;
      case 'customer.subscription.deleted':
        await handleSubscriptionCancelled(event.data.object);
        break;
      case 'invoice.payment_succeeded':
        await handleInvoiceSuccess(event.data.object);
        break;
      case 'invoice.payment_failed':
        await handleInvoiceFailed(event.data.object);
        break;
    }
    
    // Record event for idempotency
    await prisma.stripeEvent.create({
      data: {
        id: event.id,
        type: event.type,
        processed: true,
        processedAt: new Date(),
      },
    });
    
    return res.status(200).json({ received: true });
  } catch (error) {
    console.error('Webhook error:', error.message);
    return res.status(400).json({ error: `Webhook Error: ${error.message}` });
  }
}
</example>

<example>
// Good: Feature access check implementation
async function checkFeatureAccess(feature) {
  try {
    // Get token from secure storage
    const token = localStorage.getItem('subscriptionToken');
    if (!token) return false;
    
    // Verify with server
    const response = await fetch('/api/check-feature', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token, feature }),
    });
    
    const data = await response.json();
    return data.access;
  } catch (error) {
    console.error('Feature check error:', error);
    return false; // Fail closed - no access on error
  }
}
</example>

<example>
// Good: Feature-gated component implementation
function PremiumFeature({ feature, fallback }) {
  const [hasAccess, setHasAccess] = useState(false);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    async function checkAccess() {
      setLoading(true);
      const access = await checkFeatureAccess(feature);
      setHasAccess(access);
      setLoading(false);
    }
    
    checkAccess();
  }, [feature]);
  
  if (loading) return <LoadingIndicator />;
  if (!hasAccess) return fallback || <UpgradePrompt feature={feature} />;
  
  return <div className="premium-feature">/* Feature content */</div>;
}
</example>

<example type="invalid">
// Bad: Insecure handling of Stripe customer data
async function createStripeCustomer(email, name, paymentMethod) {
  // ❌ API key hardcoded
  const stripe = new Stripe('sk_test_123456789');
  
  // ❌ No error handling
  const customer = await stripe.customers.create({
    email,
    name,
    payment_method: paymentMethod,
  });
  
  // ❌ Logging sensitive data
  console.log("Customer created:", JSON.stringify(customer));
  
  return customer;
}
</example>

<example type="invalid">
// Bad: Poor webhook implementation
export default async function handler(req, res) {
  // ❌ Using standard body parsing (will fail with signature verification)
  const event = req.body;
  
  // ❌ No signature verification
  if (event.type === 'customer.subscription.created') {
    // ❌ No idempotency check
    await updateUserSubscription(event.data.object);
  }
  
  // ❌ No error handling
  return res.status(200).json({ received: true });
}
</example>

<example type="invalid">
// Poor implementation with client-side only verification
function PremiumFeature() {
  // ❌ No server verification, easily manipulated
  const hasSubscription = localStorage.getItem('hasSubscription') === 'true';
  
  if (!hasSubscription) {
    return <div>Please subscribe</div>;
  }
  
  return <div>Premium feature content</div>;
}
</example>

## Implementation Checklist

- [ ] Configure Stripe API keys in environment variables
- [ ] Implement webhook handler with signature verification
- [ ] Support all subscription lifecycle events
- [ ] Set up Stripe Checkout for subscription creation
- [ ] Set up Customer Portal for subscription management
- [ ] Implement subscription status tracking in database
- [ ] Implement JWT-based feature entitlements
- [ ] Create feature-gated components for UI
- [ ] Create webhook test page and utilities
- [ ] Test full subscription lifecycle (create/update/cancel)
- [ ] Implement proper error handling and logging
- [ ] Set up monitoring for payment failures and webhook errors

## Related Rules
- [020-payment-security.mdc](mdc:departments/engineering/security/020-payment-security.mdc) - Core payment security standards
- [011-env-var-security.mdc](mdc:departments/engineering/security/011-env-var-security.mdc) - API key management
- [012-api-security.mdc](mdc:departments/engineering/security/012-api-security.mdc) - Secure API implementations
- [046-session-validation.mdc](mdc:departments/engineering/security/046-session-validation.mdc) - Session security for auth flows
- [130-logging-standards.mdc](mdc:departments/engineering/operations/130-logging-standards.mdc) - Logging standards
- [131-error-handling.mdc](mdc:departments/engineering/operations/131-error-handling.mdc) - Error handling
- [330-third-party-integration-testing.mdc](mdc:departments/engineering/testing/330-third-party-integration-testing.mdc) - Testing third-party integrations
