---
description:
globs:
alwaysApply: false
---
description: Apply ALWAYS when managing project dependencies to ensure security vulnerabilities are identified and mitigated
globs: "**/package*.json,**/requirements.txt,**/Gemfile,**/pom.xml,**/build.gradle,**/Cargo.toml"

# Dependency Security Auditing

This document outlines the requirements and best practices for auditing and managing security vulnerabilities in third-party dependencies across all projects.

## Core Requirements

- **REQUIRED**: Run dependency security audits before all deployments
- **REQUIRED**: Address all high and critical severity vulnerabilities before deployment
- **REQUIRED**: Document any security exceptions with clear justification and remediation plan
- **REQUIRED**: Include dependency auditing in CI/CD pipelines as a required step
- **REQUIRED**: Set up alerts for newly discovered vulnerabilities in your dependencies

## Pre-Deployment Security Audits

### Running Security Audits

Dependency security audits must be performed before every deployment using the appropriate tool for your technology stack:

```bash
# Node.js projects - npm
npm audit

# To fix automatically where possible
npm audit fix

# For situations where breaking changes might occur
npm audit fix --force  # Use with caution

# Node.js projects - yarn
yarn audit

# Node.js projects - pnpm
pnpm audit

# Python projects
pip-audit

# Ruby projects
bundle audit

# Java projects
mvn dependency-check:check

# Golang projects
govulncheck ./...
```

### Vulnerability Management

- Prioritize vulnerabilities based on severity, exploitability, and business impact
- Create action plans for addressing vulnerabilities that cannot be immediately fixed
- Document deliberate decisions to accept certain vulnerability risks
- Set time limits for temporary exceptions (e.g., "fix within 2 weeks")
- Consider the application context when evaluating vulnerabilities

```typescript
// Example vulnerability exception documentation
/**
 * VULNERABILITY EXCEPTION
 * 
 * Package: example-package@1.2.3
 * CVE: CVE-2023-12345
 * Severity: High
 * 
 * Exception Reason:
 * This vulnerability affects the server-side rendering functionality which we do not use
 * in our application. We use this package only for client-side data formatting.
 * 
 * Mitigation:
 * We have implemented input validation before passing data to this package.
 * 
 * Plan:
 * - Monitor for package update that fixes this issue
 * - Update by: 2023-12-31
 * - Owner: Security Team
 */
```

## Automated Security Scanning

### Continuous Dependency Scanning

Set up automated tools for continuous dependency scanning to identify issues as early as possible:

```yaml
# Example GitHub Dependabot configuration
# .github/dependabot.yml
version: 2
updates:
  - package-ecosystem: "npm" # or yarn, pip, composer, etc.
    directory: "/"
    schedule:
      interval: "weekly"
    # Focus on security updates
    open-pull-requests-limit: 10
    labels:
      - "dependencies"
      - "security"
    # Group minor updates to reduce PR noise
    groups:
      development-dependencies:
        patterns:
          - "eslint*"
          - "jest*"
          - "@types/*"
      production-dependencies:
        patterns:
          - "react*"
          - "next*"
```

### Integration with CI/CD

- Configure CI/CD pipelines to run dependency audits as a required step
- Block deployments on high/critical vulnerabilities
- Send notifications to security teams for new vulnerabilities
- Generate reports for compliance and auditing purposes
- Schedule deeper security scans on a regular basis (weekly/monthly)

## Dependency Management Strategy

### Update Strategy

Maintain a clear dependency update strategy to balance security and stability:

```bash
# Identify outdated packages
npm outdated

# Use specialized tools for managing updates
npx npm-check-updates

# Update to latest versions with review
npx npm-check-updates -u
npm install

# Update specific packages only
npm update package-name
```

### Dependency Minimization

- Regularly review and prune unnecessary dependencies
- Consider the security implications before adding new dependencies
- Evaluate the activity and maintenance status of dependencies before adoption
- Check dependency sizes and their impact on your application bundle
- Consider vendoring small, critical dependencies if they have security issues

```bash
# Analyze your bundle size including dependencies
npx webpack-bundle-analyzer

# Find duplicate packages in your dependency tree
npx depcheck

# Identify potential dependency issues
npx madge --circular .
```

## Language-Specific Requirements

### JavaScript/TypeScript (Node.js)

- Always use lockfiles (package-lock.json, yarn.lock, pnpm-lock.yaml)
- Consider using npm ci instead of npm install in CI/CD for consistent installs
- Use npm audit --omit=dev in production contexts where appropriate

```bash
# Production audit only (npm)
npm audit --omit=dev

# Install exact versions to prevent unexpected updates
npm install --save-exact package-name
```

### Python

- Use virtual environments to isolate dependencies
- Consider tools like pip-audit, safety, or pipenv check
- Use requirements.txt or Pipfile.lock to lock dependencies

```bash
# Python audit tools
pip install pip-audit
pip-audit

# Alternative tools
pip install safety
safety check
```

### Ruby

- Use bundle audit to check for vulnerabilities
- Keep Gemfile.lock in version control
- Use bundle update --conservative for safer updates

```bash
# Install the bundle-audit tool
gem install bundler-audit

# Update the vulnerability database
bundle audit update

# Check for vulnerabilities
bundle audit check
```

### Java

- Use OWASP Dependency Check for vulnerability scanning
- Consider using Snyk or Dependabot for automated updates
- Keep Maven or Gradle dependency versions pinned

```bash
# Maven OWASP Dependency Check
mvn org.owasp:dependency-check-maven:check

# Gradle OWASP Dependency Check
./gradlew dependencyCheckAnalyze
```

## Handling Security Incidents

### Responding to Zero-Day Vulnerabilities

In case of critical zero-day vulnerabilities:

1. Assess impact and exploitability in your specific context
2. Implement immediate mitigation (e.g., WAF rules, traffic filtering)
3. Schedule emergency patch deployment if necessary
4. Monitor for exploitation attempts
5. Document incident response actions

### Vulnerability Disclosure

- Follow responsible disclosure principles for vulnerabilities in your own code
- Report vulnerabilities to dependency maintainers through proper channels
- Consider contributing fixes upstream for open source dependencies
- Document all communications regarding vulnerability disclosures

## Implementation Checklist

- [ ] Configure CI/CD pipeline to run dependency audits before deployment
- [ ] Set up automated dependency scanning tools (Dependabot, Snyk, etc.)
- [ ] Create a process for handling vulnerability exceptions
- [ ] Document your dependency update strategy
- [ ] Schedule regular dependency reviews and updates
- [ ] Add pre-deployment audit checks to your release process
- [ ] Test thoroughly after security-related dependency updates
- [ ] Monitor security mailing lists or vulnerability databases for relevant issues
